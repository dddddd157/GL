import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ContentType
from aiogram.client.default import DefaultBotProperties

# === üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
SOURCE_CHAT_ID = int(os.getenv("SOURCE_CHAT_ID", "-1002429690404"))

# –¢–µ–≥–∏ –∏ –ø–æ–¥—Ç–µ–º—ã
TAG_CHAT_MAPPING = {
    "–£–õ–ö –õ–µ–Ω–∏–Ω—Å–∫–æ–≥–æ –ö–æ–º—Å–æ–º–æ–ª–∞ –ø—Ä-–∫—Ç 7": {
        "group_id": -1002187630843,
        "subtopics": [14235]
    },
    "–£–õ–ö –†–µ–ø–∏–Ω–∞ 4": {
        "group_id": -1002040185724,
        "subtopics": [6231]
    },
    "–£–õ–ö –¢—É–ø–æ–ª–µ–≤–∞ 15": {
        "group_id": -1002260078936,
        "subtopics": [3557]
    },
    "–£–õ–ö –ì–µ–Ω–µ—Ä–∞–ª–∞ –¢—é–ª–µ–Ω–µ–≤–∞ 40": {
        "group_id": -1002117038361,
        "subtopics": [12978]
    },
    "–£–õ–ö –£–ª—å—è–Ω–æ–≤—Å–∫–∏–π –ø—Ä-–∫—Ç 19–ø–æ–º1": {
        "group_id": -1002104898038,
        "subtopics": [21649]
    },
    "–£–õ–ö –ö–∏—Ä–æ–≤–∞ 54": {
        "group_id": -1002186031434,
        "subtopics": [6]
    },
    "–£–õ–ö –Æ–Ω–æ—Å—Ç–∏ 51": {
        "group_id": -1002266923861,
        "subtopics": [3793]
    },
    "–£–õ–ö –ì–µ–Ω–µ—Ä–∞–ª–∞ –¢—é–ª–µ–Ω–µ–≤–∞ –ø—Ä-–∫—Ç 6–ë": {
        "group_id": -1002037195030,
        "subtopics": [15297]
    },
}

# === üîç –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º default=DefaultBotProperties(...)
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)
dp = Dispatcher()


@dp.message(F.chat.id == SOURCE_CHAT_ID)
async def handle_all_messages(message: types.Message):
    content_text = message.text or message.caption
    if not content_text:
        return

    for tag, chat_info in TAG_CHAT_MAPPING.items():
        if tag in content_text:
            complaint_text = f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ü–æ—Å—Ç—É–ø–∏–ª–∞ –∂–∞–ª–æ–±–∞! –ü—Ä–∏–º–∏—Ç–µ –º–µ—Ä—ã! ‚ö†Ô∏è\n\n{content_text}"

            for topic_id in chat_info["subtopics"]:
                try:
                    # –¢–µ–∫—Å—Ç
                    if message.content_type == ContentType.TEXT:
                        await bot.send_message(
                            chat_id=chat_info["group_id"],
                            text=complaint_text,
                            message_thread_id=topic_id
                        )
                    # –ú–µ–¥–∏–∞: —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç, –∏ —Ç.–¥.
                    elif message.content_type in [
                        ContentType.PHOTO,
                        ContentType.VIDEO,
                        ContentType.DOCUMENT,
                        ContentType.VOICE,
                        ContentType.AUDIO,
                        ContentType.STICKER,
                        ContentType.ANIMATION,
                        ContentType.VIDEO_NOTE
                    ]:
                        await message.copy_to(
                            chat_id=chat_info["group_id"],
                            message_thread_id=topic_id,
                            caption=complaint_text if message.caption or message.text else None
                        )
                    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã
                    else:
                        await message.copy_to(
                            chat_id=chat_info["group_id"],
                            message_thread_id=topic_id
                        )

                    logging.info(f"‚úÖ –ñ–∞–ª–æ–±–∞ —Å —Ç–µ–≥–æ–º '{tag}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ø–æ–¥—Ç–µ–º—É {topic_id}")

                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –≤ –ø–æ–¥—Ç–µ–º—É {topic_id}: {e}")


# === üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
